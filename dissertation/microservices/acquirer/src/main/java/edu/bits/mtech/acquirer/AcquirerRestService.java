/*
 * Copyright (c) 2018.
 * BITS Dissertation Proof Concept. Not related to any organization.
 */

package edu.bits.mtech.acquirer;

import edu.bits.mtech.acquirer.bo.AuthorizeRequest;
import edu.bits.mtech.acquirer.bo.AuthorizeResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.UUID;
import java.util.logging.Logger;

/**
 * Rest controller for Acquirer. This is just a service wihout any logic
 * and is out of scope of POC.
 *
 * @author Tushar Phadke
 */
@RestController
public class AcquirerRestService {

    private static final Logger logger = Logger.getLogger(AcquirerRestService.class.getName());

    /**
     * Authorize from acquirer.
     *
     * @param authorizeRequest authorize request
     * @return a status of authorization
     */
    @RequestMapping(method = RequestMethod.POST, value = "/rest/authorize", consumes = "application/json",
            produces = "application/json")
    public ResponseEntity<AuthorizeResponse> authorize(@RequestBody @Valid @Validated @NotNull AuthorizeRequest authorizeRequest) {

        AuthorizeResponse authorizeResponse = new AuthorizeResponse();
        authorizeResponse.setAuthorizeId(getUUID());
        authorizeResponse.setAuthorizeAmount(authorizeRequest.getAuthorizeAmount());

        logger.info("Acquirer Authorize Successful: " + authorizeResponse);

        return ResponseEntity.accepted().body(authorizeResponse);
    }

    private String getUUID() {
        String uuid = UUID.randomUUID().toString();
        logger.info("Unique ID generated by system: " + uuid);
        return uuid;
    }
    /**
     * Update authorize from acquirer.
     *
     * @param authorizeRequest authorize request
     * @return a status of authorization
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/rest/authorize", consumes = "application/json",
            produces = "application/json")
    public ResponseEntity<AuthorizeResponse> authorizeUpdate(@RequestBody @Valid @Validated @NotNull AuthorizeRequest authorizeRequest) {

        AuthorizeResponse authorizeResponse = new AuthorizeResponse();
        authorizeResponse.setAuthorizeId(authorizeRequest.getPaymentId());
        authorizeResponse.setAuthorizeAmount(authorizeRequest.getAuthorizeAmount());

        logger.info("Acquirer Authorize Successful: " + authorizeResponse);

        return ResponseEntity.accepted().body(authorizeResponse);
    }

    /**
     * Cancel authorize from acquirer.
     *
     * @param paymentId paymentId
     * @return a status of authorization
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/rest/authorize/cancel/{paymentId}", consumes = "application/json",
            produces = "application/json")
    public ResponseEntity<AuthorizeResponse> cancelAuthorize(@PathVariable("paymentId") String paymentId) {

        AuthorizeResponse authorizeResponse = new AuthorizeResponse();


        logger.info("Acquirer Authorize Successfully cancelled for paymentId " + paymentId);

        return ResponseEntity.ok().body(authorizeResponse);
    }
}
